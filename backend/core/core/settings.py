"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""


from datetime import timedelta
from pathlib import Path
from django.contrib.messages import constants as messages
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default="test")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", cast=bool, default=True)
DEBUG_DB = config("DEBUG_DB", cast=bool, default=True)
SHOW_DEBUGGER_TOOLBAR = config("SHOW_DEBUGGER_TOOLBAR", cast=bool, default=False)

ALLOWED_HOSTS = config(
    "ALLOWED_HOSTS",
    cast=lambda v: [s.strip() for s in v.split(",")],
    default="*",
)

COMINGSOON = config("COMINGSOON", cast=bool, default=False)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.sitemaps",
    "website",
    "rest_framework",
    "rest_framework.authtoken",
    "drf_yasg",
    "corsheaders",
    "cacheops",
    'django_elasticsearch_dsl',
    'django_elasticsearch_dsl_drf',
]



SITE_ID = config("SITE_ID", cast=int, default=1)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]



ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates", BASE_DIR.parent.parent / "frontend" / "dist"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


DATABASES = {
        "default": {
            "ENGINE": config("DB_ENGINE", default="django.db.backends.mysql"),
            "NAME": config("DB_NAME", default="mysql"),
            "USER": config("DB_USER", default="mysql"),
            "PASSWORD": config("DB_PASS", default="mysql"),
            "HOST": config("DB_HOST", default="db"),
            "PORT": config("DB_PORT", cast=int, default=3306),
        }
}

# ELASTIC SEARCH
ES_URI = config("ELASTIC_URI", cast=str, default="http://elasticsearch:9200")
ELASTICSEARCH_DSL = {
    "default": {
        "hosts": ES_URI,
        'timeout': 30,
        'retry_on_timeout': True,
        'max_retries': 10,
    },
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = config("TIME_ZONE", default="UTC")

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static-files/"
MEDIA_URL = "/media-files/"

STATIC_ROOT = BASE_DIR / "static"
MEDIA_ROOT = BASE_DIR / "media"


STATICFILES_DIRS = [
    BASE_DIR / "staticfiles",
    BASE_DIR.parent.parent / "frontend" / "dist",
]


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# messages configuration for notification handeling in pages
MESSAGE_TAGS = {
    messages.DEBUG: "info",
    messages.INFO: "info",
    messages.SUCCESS: "success",
    messages.WARNING: "warning",
    messages.ERROR: "danger",
}


# Email Configurations for production and development
EMAIL_BACKEND="django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST=config("EMAIL_HOST", default="mail_server")
EMAIL_PORT=587
EMAIL_HOST_USER=config("EMAIL_HOST_USER", default="username")
EMAIL_HOST_PASSWORD=config("EMAIL_HOST_PASSWORD", default="password")
EMAIL_USE_TLS=True
DEFAULT_FROM_EMAIL = config(
        "DEFAULT_FROM_EMAIL", default="wetoo@mail.me2we2.com")


# security configs for production
if config("USE_SSL_CONFIG", cast=bool, default=False):
    # Https settings
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # SECURE_SSL_REDIRECT = True

    # HSTS settings
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True

    # more security settings
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = "SAMEORIGIN"
    SECURE_REFERRER_POLICY = "strict-origin"
    USE_X_FORWARDED_HOST = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
}
if config("DISABLE_BROWSEABLE_API", cast=bool, default=False):
    REST_FRAMEWORK["DEFAULT_RENDERER_CLASSES"] = (
        "rest_framework.renderers.JSONRenderer",)


# cors headers config
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:8000",
#     "http://127.0.0.1:8000",

# ]

# swagger configs
SHOW_SWAGGER = config("SHOW_SWAGGER", cast=bool, default=True)
SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": True,
    "SECURITY_DEFINITIONS": [],
    "LOGIN_URL": "rest_framework:login",
    "LOGOUT_URL": "rest_framework:logout",
    "REFETCH_SCHEMA_ON_LOGOUT": True,
    "JSON_EDITOR": True,
}

# From godo pet
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True
SPECTACULAR_SETTINGS = {
    "SCHEMA_PROTOCOL": ["https"],
}

# simple jwt settings

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=90),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,
}


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s] {levelname} {name} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
}

# django debug toolbar for docker usage
if DEBUG:
    if SHOW_DEBUGGER_TOOLBAR:
        INSTALLED_APPS += [
            "debug_toolbar",
        ]
        MIDDLEWARE += [
            "debug_toolbar.middleware.DebugToolbarMiddleware",
        ]
        import socket  # only if you haven't already imported this
        hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
        INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]
    

# User base model
AUTH_USER_MODEL = "website.User"

REDIS_TEST_DATABASE = 10
# PREVIOUS REDIS CONFIG
# CACHEOPS_REDIS = {
#     'host': 'redis', # redis-server is on same machine
#     'port': '6379',        # default redis port
#     'db': 0,             # SELECT non-default redis database
#                          # using separate redis db or redis instance
#                          # is highly recommended
#     'socket_timeout': 3,
# }

# CACHEOPS = {
#     # Automatically cache any User.objects.get() calls for 15 minutes
#     # This includes request.user or post.author access,
#     # where Post.author is a foreign key to auth.User
#     # 'auth.user': ('get', 60*15),
#     'auth.user': None,

#     # Automatically cache all gets, queryset fetches and counts
#     # to other django.contrib.auth models for an hour
#     # 'auth.*': ('all', 60*60),
#     'auth.*': None,

#     # Enable manual caching on all news models with default timeout of an hour
#     # Use News.objects.cache().get(...)
#     #  or Tags.objects.filter(...).order_by(...).cache()
#     # to cache particular ORM request.
#     # Invalidation is still automatic
#     # 'news.*': ('just_enable', 60*60),
#     'auth.permission': None,

#     # Automatically cache count requests for all other models for 15 min
#     # '*.*': ('count', 60*15),
# }


# # HAMRAVESH REDIS CONFIG
# CACHEOPS_REDIS = {
#     'host': config("REDIS_URL", default="redis"), # redis-server is on same machine
#     'port': config("REDIS_PORT", default='6379'),        # default redis port
#     'db': 0,             # SELECT non-default redis database
#                          # using separate redis db or redis instance
#                          # is highly recommended
#     'socket_timeout': 3,
# }

# CACHEOPS = {
#     # Automatically cache any User.objects.get() calls for 15 minutes
#     # This includes request.user or post.author access,
#     # where Post.author is a foreign key to auth.User
#     # 'auth.user': ('get', 60*15),
#     'auth.user': None,

#     # Automatically cache all gets, queryset fetches and counts
#     # to other django.contrib.auth models for an hour
#     # 'auth.*': ('all', 60*60),
#     'auth.*': None,

#     # Enable manual caching on all news models with default timeout of an hour
#     # Use News.objects.cache().get(...)
#     #  or Tags.objects.filter(...).order_by(...).cache()
#     # to cache particular ORM request.
#     # Invalidation is still automatic
#     # 'news.*': ('just_enable', 60*60),
#     'auth.permission': None,

#     # Automatically cache count requests for all other models for 15 min
#     # '*.*': ('count', 60*15),
# }

# Redis Config
# caching configs
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.dummy.DummyCache",
    }
}

